// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amd_uav_flight_update.proto

#include "amd_uav_flight_update.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_amd_5fuav_5fflight_5fupdate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_amd_5fuav_5fflight_5fupdate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AmdUavFlightUpdate;
}  // namespace protobuf_amd_5fuav_5fflight_5fupdate_2eproto
namespace airmap {
namespace telemetry {
class AmdUavFlightUpdatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmdUavFlightUpdates>
      _instance;
} _AmdUavFlightUpdates_default_instance_;
class AmdUavFlightUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmdUavFlightUpdate>
      _instance;
} _AmdUavFlightUpdate_default_instance_;
}  // namespace telemetry
}  // namespace airmap
namespace protobuf_amd_5fuav_5fflight_5fupdate_2eproto {
static void InitDefaultsAmdUavFlightUpdates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_AmdUavFlightUpdates_default_instance_;
    new (ptr) ::airmap::telemetry::AmdUavFlightUpdates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::AmdUavFlightUpdates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AmdUavFlightUpdates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAmdUavFlightUpdates}, {
      &protobuf_amd_5fuav_5fflight_5fupdate_2eproto::scc_info_AmdUavFlightUpdate.base,}};

static void InitDefaultsAmdUavFlightUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_AmdUavFlightUpdate_default_instance_;
    new (ptr) ::airmap::telemetry::AmdUavFlightUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::AmdUavFlightUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AmdUavFlightUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAmdUavFlightUpdate}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AmdUavFlightUpdates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AmdUavFlightUpdate.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdates, updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, flight_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, course_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::AmdUavFlightUpdate, speed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::airmap::telemetry::AmdUavFlightUpdates)},
  { 6, -1, sizeof(::airmap::telemetry::AmdUavFlightUpdate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_AmdUavFlightUpdates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_AmdUavFlightUpdate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "amd_uav_flight_update.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033amd_uav_flight_update.proto\022\020airmap.te"
      "lemetry\"L\n\023AmdUavFlightUpdates\0225\n\007update"
      "s\030\001 \003(\0132$.airmap.telemetry.AmdUavFlightU"
      "pdate\"\220\001\n\022AmdUavFlightUpdate\022\021\n\ttimestam"
      "p\030\001 \001(\004\022\021\n\tflight_id\030\002 \001(\t\022\020\n\010latitude\030\003"
      " \001(\001\022\021\n\tlongitude\030\004 \001(\001\022\016\n\006course\030\005 \001(\002\022"
      "\020\n\010altitude\030\006 \001(\002\022\r\n\005speed\030\007 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "amd_uav_flight_update.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_amd_5fuav_5fflight_5fupdate_2eproto
namespace airmap {
namespace telemetry {

// ===================================================================

void AmdUavFlightUpdates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmdUavFlightUpdates::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmdUavFlightUpdates::AmdUavFlightUpdates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_amd_5fuav_5fflight_5fupdate_2eproto::scc_info_AmdUavFlightUpdates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.AmdUavFlightUpdates)
}
AmdUavFlightUpdates::AmdUavFlightUpdates(const AmdUavFlightUpdates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.AmdUavFlightUpdates)
}

void AmdUavFlightUpdates::SharedCtor() {
}

AmdUavFlightUpdates::~AmdUavFlightUpdates() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.AmdUavFlightUpdates)
  SharedDtor();
}

void AmdUavFlightUpdates::SharedDtor() {
}

void AmdUavFlightUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AmdUavFlightUpdates::descriptor() {
  ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmdUavFlightUpdates& AmdUavFlightUpdates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_amd_5fuav_5fflight_5fupdate_2eproto::scc_info_AmdUavFlightUpdates.base);
  return *internal_default_instance();
}


void AmdUavFlightUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.AmdUavFlightUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear();
}

bool AmdUavFlightUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.AmdUavFlightUpdates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .airmap.telemetry.AmdUavFlightUpdate updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.AmdUavFlightUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.AmdUavFlightUpdates)
  return false;
#undef DO_
}

void AmdUavFlightUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.AmdUavFlightUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .airmap.telemetry.AmdUavFlightUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->updates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.AmdUavFlightUpdates)
}

::google::protobuf::uint8* AmdUavFlightUpdates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.AmdUavFlightUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .airmap.telemetry.AmdUavFlightUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->updates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.AmdUavFlightUpdates)
  return target;
}

size_t AmdUavFlightUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.AmdUavFlightUpdates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .airmap.telemetry.AmdUavFlightUpdate updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmdUavFlightUpdates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.AmdUavFlightUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const AmdUavFlightUpdates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmdUavFlightUpdates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.AmdUavFlightUpdates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.AmdUavFlightUpdates)
    MergeFrom(*source);
  }
}

void AmdUavFlightUpdates::MergeFrom(const AmdUavFlightUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.AmdUavFlightUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void AmdUavFlightUpdates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.AmdUavFlightUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmdUavFlightUpdates::CopyFrom(const AmdUavFlightUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.AmdUavFlightUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmdUavFlightUpdates::IsInitialized() const {
  return true;
}

void AmdUavFlightUpdates::Swap(AmdUavFlightUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmdUavFlightUpdates::InternalSwap(AmdUavFlightUpdates* other) {
  using std::swap;
  CastToBase(&updates_)->InternalSwap(CastToBase(&other->updates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AmdUavFlightUpdates::GetMetadata() const {
  protobuf_amd_5fuav_5fflight_5fupdate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AmdUavFlightUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmdUavFlightUpdate::kTimestampFieldNumber;
const int AmdUavFlightUpdate::kFlightIdFieldNumber;
const int AmdUavFlightUpdate::kLatitudeFieldNumber;
const int AmdUavFlightUpdate::kLongitudeFieldNumber;
const int AmdUavFlightUpdate::kCourseFieldNumber;
const int AmdUavFlightUpdate::kAltitudeFieldNumber;
const int AmdUavFlightUpdate::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmdUavFlightUpdate::AmdUavFlightUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_amd_5fuav_5fflight_5fupdate_2eproto::scc_info_AmdUavFlightUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.AmdUavFlightUpdate)
}
AmdUavFlightUpdate::AmdUavFlightUpdate(const AmdUavFlightUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flight_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flight_id().size() > 0) {
    flight_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flight_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.AmdUavFlightUpdate)
}

void AmdUavFlightUpdate::SharedCtor() {
  flight_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_));
}

AmdUavFlightUpdate::~AmdUavFlightUpdate() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.AmdUavFlightUpdate)
  SharedDtor();
}

void AmdUavFlightUpdate::SharedDtor() {
  flight_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AmdUavFlightUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AmdUavFlightUpdate::descriptor() {
  ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AmdUavFlightUpdate& AmdUavFlightUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_amd_5fuav_5fflight_5fupdate_2eproto::scc_info_AmdUavFlightUpdate.base);
  return *internal_default_instance();
}


void AmdUavFlightUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.AmdUavFlightUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flight_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool AmdUavFlightUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.AmdUavFlightUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flight_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flight_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flight_id().data(), static_cast<int>(this->flight_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "airmap.telemetry.AmdUavFlightUpdate.flight_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float course = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.AmdUavFlightUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.AmdUavFlightUpdate)
  return false;
#undef DO_
}

void AmdUavFlightUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.AmdUavFlightUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // string flight_id = 2;
  if (this->flight_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flight_id().data(), static_cast<int>(this->flight_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "airmap.telemetry.AmdUavFlightUpdate.flight_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->flight_id(), output);
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // float course = 5;
  if (this->course() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->course(), output);
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->altitude(), output);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.AmdUavFlightUpdate)
}

::google::protobuf::uint8* AmdUavFlightUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.AmdUavFlightUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // string flight_id = 2;
  if (this->flight_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flight_id().data(), static_cast<int>(this->flight_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "airmap.telemetry.AmdUavFlightUpdate.flight_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flight_id(), target);
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // float course = 5;
  if (this->course() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->course(), target);
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->altitude(), target);
  }

  // float speed = 7;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.AmdUavFlightUpdate)
  return target;
}

size_t AmdUavFlightUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.AmdUavFlightUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string flight_id = 2;
  if (this->flight_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flight_id());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // float course = 5;
  if (this->course() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 6;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 7;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmdUavFlightUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.AmdUavFlightUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AmdUavFlightUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AmdUavFlightUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.AmdUavFlightUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.AmdUavFlightUpdate)
    MergeFrom(*source);
  }
}

void AmdUavFlightUpdate::MergeFrom(const AmdUavFlightUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.AmdUavFlightUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flight_id().size() > 0) {

    flight_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flight_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.course() != 0) {
    set_course(from.course());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void AmdUavFlightUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.AmdUavFlightUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmdUavFlightUpdate::CopyFrom(const AmdUavFlightUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.AmdUavFlightUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmdUavFlightUpdate::IsInitialized() const {
  return true;
}

void AmdUavFlightUpdate::Swap(AmdUavFlightUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmdUavFlightUpdate::InternalSwap(AmdUavFlightUpdate* other) {
  using std::swap;
  flight_id_.Swap(&other->flight_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(course_, other->course_);
  swap(altitude_, other->altitude_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AmdUavFlightUpdate::GetMetadata() const {
  protobuf_amd_5fuav_5fflight_5fupdate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_amd_5fuav_5fflight_5fupdate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
}  // namespace airmap
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::AmdUavFlightUpdates* Arena::CreateMaybeMessage< ::airmap::telemetry::AmdUavFlightUpdates >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::AmdUavFlightUpdates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::AmdUavFlightUpdate* Arena::CreateMaybeMessage< ::airmap::telemetry::AmdUavFlightUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::AmdUavFlightUpdate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
