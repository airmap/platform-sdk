// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#include "telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace airmap {
namespace telemetry {
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class AttitudeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Attitude>
      _instance;
} _Attitude_default_instance_;
class SpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Speed>
      _instance;
} _Speed_default_instance_;
class BarometerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Barometer>
      _instance;
} _Barometer_default_instance_;
}  // namespace telemetry
}  // namespace airmap
namespace protobuf_telemetry_2eproto {
static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_Position_default_instance_;
    new (ptr) ::airmap::telemetry::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsAttitude() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_Attitude_default_instance_;
    new (ptr) ::airmap::telemetry::Attitude();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::Attitude::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Attitude =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAttitude}, {}};

static void InitDefaultsSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_Speed_default_instance_;
    new (ptr) ::airmap::telemetry::Speed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::Speed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Speed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeed}, {}};

static void InitDefaultsBarometer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::airmap::telemetry::_Barometer_default_instance_;
    new (ptr) ::airmap::telemetry::Barometer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::airmap::telemetry::Barometer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Barometer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBarometer}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Attitude.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Speed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Barometer.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, altitude_agl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, altitude_msl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Position, horizontal_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Attitude, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Attitude, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Attitude, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Attitude, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Speed, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Speed, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Speed, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Speed, velocity_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Barometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Barometer, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::airmap::telemetry::Barometer, pressure_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::airmap::telemetry::Position)},
  { 11, -1, sizeof(::airmap::telemetry::Attitude)},
  { 20, -1, sizeof(::airmap::telemetry::Speed)},
  { 29, -1, sizeof(::airmap::telemetry::Barometer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_Attitude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_Speed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::airmap::telemetry::_Barometer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "telemetry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017telemetry.proto\022\020airmap.telemetry\"\213\001\n\010"
      "Position\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010latitude\030"
      "\002 \001(\001\022\021\n\tlongitude\030\003 \001(\001\022\024\n\014altitude_agl"
      "\030\004 \001(\002\022\024\n\014altitude_msl\030\005 \001(\002\022\033\n\023horizont"
      "al_accuracy\030\006 \001(\002\"G\n\010Attitude\022\021\n\ttimesta"
      "mp\030\001 \001(\004\022\013\n\003yaw\030\002 \001(\002\022\r\n\005pitch\030\003 \001(\002\022\014\n\004"
      "roll\030\004 \001(\002\"V\n\005Speed\022\021\n\ttimestamp\030\001 \001(\004\022\022"
      "\n\nvelocity_x\030\002 \001(\002\022\022\n\nvelocity_y\030\003 \001(\002\022\022"
      "\n\nvelocity_z\030\004 \001(\002\"0\n\tBarometer\022\021\n\ttimes"
      "tamp\030\001 \001(\004\022\020\n\010pressure\030\002 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "telemetry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_telemetry_2eproto
namespace airmap {
namespace telemetry {

// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kTimestampFieldNumber;
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kAltitudeAglFieldNumber;
const int Position::kAltitudeMslFieldNumber;
const int Position::kHorizontalAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_telemetry_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_accuracy_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(horizontal_accuracy_));
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.Position)
}

void Position::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_accuracy_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(horizontal_accuracy_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_telemetry_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_accuracy_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(horizontal_accuracy_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude_agl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_agl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude_msl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_msl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horizontal_accuracy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontal_accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // float altitude_agl = 4;
  if (this->altitude_agl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude_agl(), output);
  }

  // float altitude_msl = 5;
  if (this->altitude_msl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude_msl(), output);
  }

  // float horizontal_accuracy = 6;
  if (this->horizontal_accuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->horizontal_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // float altitude_agl = 4;
  if (this->altitude_agl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude_agl(), target);
  }

  // float altitude_msl = 5;
  if (this->altitude_msl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude_msl(), target);
  }

  // float horizontal_accuracy = 6;
  if (this->horizontal_accuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->horizontal_accuracy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // float altitude_agl = 4;
  if (this->altitude_agl() != 0) {
    total_size += 1 + 4;
  }

  // float altitude_msl = 5;
  if (this->altitude_msl() != 0) {
    total_size += 1 + 4;
  }

  // float horizontal_accuracy = 6;
  if (this->horizontal_accuracy() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude_agl() != 0) {
    set_altitude_agl(from.altitude_agl());
  }
  if (from.altitude_msl() != 0) {
    set_altitude_msl(from.altitude_msl());
  }
  if (from.horizontal_accuracy() != 0) {
    set_horizontal_accuracy(from.horizontal_accuracy());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_agl_, other->altitude_agl_);
  swap(altitude_msl_, other->altitude_msl_);
  swap(horizontal_accuracy_, other->horizontal_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Attitude::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attitude::kTimestampFieldNumber;
const int Attitude::kYawFieldNumber;
const int Attitude::kPitchFieldNumber;
const int Attitude::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attitude::Attitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_telemetry_2eproto::scc_info_Attitude.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.Attitude)
}

void Attitude::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(roll_));
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.Attitude)
  SharedDtor();
}

void Attitude::SharedDtor() {
}

void Attitude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Attitude::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Attitude& Attitude::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_telemetry_2eproto::scc_info_Attitude.base);
  return *internal_default_instance();
}


void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.Attitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

bool Attitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.Attitude)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.Attitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.Attitude)
  return false;
#undef DO_
}

void Attitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.Attitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.Attitude)
}

::google::protobuf::uint8* Attitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.Attitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.Attitude)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Attitude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Attitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.Attitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.Attitude)
    MergeFrom(*source);
  }
}

void Attitude::MergeFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.Attitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Attitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::Swap(Attitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attitude::InternalSwap(Attitude* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Attitude::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Speed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Speed::kTimestampFieldNumber;
const int Speed::kVelocityXFieldNumber;
const int Speed::kVelocityYFieldNumber;
const int Speed::kVelocityZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Speed::Speed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_telemetry_2eproto::scc_info_Speed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.Speed)
}
Speed::Speed(const Speed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_z_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(velocity_z_));
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.Speed)
}

void Speed::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_z_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(velocity_z_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.Speed)
  SharedDtor();
}

void Speed::SharedDtor() {
}

void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Speed::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Speed& Speed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_telemetry_2eproto::scc_info_Speed.base);
  return *internal_default_instance();
}


void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.Speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_z_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(velocity_z_));
  _internal_metadata_.Clear();
}

bool Speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.Speed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.Speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.Speed)
  return false;
#undef DO_
}

void Speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.Speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // float velocity_x = 2;
  if (this->velocity_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity_x(), output);
  }

  // float velocity_y = 3;
  if (this->velocity_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity_y(), output);
  }

  // float velocity_z = 4;
  if (this->velocity_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.Speed)
}

::google::protobuf::uint8* Speed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.Speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // float velocity_x = 2;
  if (this->velocity_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity_x(), target);
  }

  // float velocity_y = 3;
  if (this->velocity_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity_y(), target);
  }

  // float velocity_z = 4;
  if (this->velocity_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.Speed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // float velocity_x = 2;
  if (this->velocity_x() != 0) {
    total_size += 1 + 4;
  }

  // float velocity_y = 3;
  if (this->velocity_y() != 0) {
    total_size += 1 + 4;
  }

  // float velocity_z = 4;
  if (this->velocity_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Speed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.Speed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.Speed)
    MergeFrom(*source);
  }
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.velocity_x() != 0) {
    set_velocity_x(from.velocity_x());
  }
  if (from.velocity_y() != 0) {
    set_velocity_y(from.velocity_y());
  }
  if (from.velocity_z() != 0) {
    set_velocity_z(from.velocity_z());
  }
}

void Speed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::Swap(Speed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speed::InternalSwap(Speed* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_y_, other->velocity_y_);
  swap(velocity_z_, other->velocity_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Speed::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Barometer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Barometer::kTimestampFieldNumber;
const int Barometer::kPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Barometer::Barometer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_telemetry_2eproto::scc_info_Barometer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:airmap.telemetry.Barometer)
}
Barometer::Barometer(const Barometer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pressure_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(pressure_));
  // @@protoc_insertion_point(copy_constructor:airmap.telemetry.Barometer)
}

void Barometer::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pressure_));
}

Barometer::~Barometer() {
  // @@protoc_insertion_point(destructor:airmap.telemetry.Barometer)
  SharedDtor();
}

void Barometer::SharedDtor() {
}

void Barometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Barometer::descriptor() {
  ::protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Barometer& Barometer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_telemetry_2eproto::scc_info_Barometer.base);
  return *internal_default_instance();
}


void Barometer::Clear() {
// @@protoc_insertion_point(message_clear_start:airmap.telemetry.Barometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pressure_));
  _internal_metadata_.Clear();
}

bool Barometer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:airmap.telemetry.Barometer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pressure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:airmap.telemetry.Barometer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:airmap.telemetry.Barometer)
  return false;
#undef DO_
}

void Barometer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:airmap.telemetry.Barometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // float pressure = 2;
  if (this->pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pressure(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:airmap.telemetry.Barometer)
}

::google::protobuf::uint8* Barometer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:airmap.telemetry.Barometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // float pressure = 2;
  if (this->pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pressure(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:airmap.telemetry.Barometer)
  return target;
}

size_t Barometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:airmap.telemetry.Barometer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // float pressure = 2;
  if (this->pressure() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Barometer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:airmap.telemetry.Barometer)
  GOOGLE_DCHECK_NE(&from, this);
  const Barometer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Barometer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:airmap.telemetry.Barometer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:airmap.telemetry.Barometer)
    MergeFrom(*source);
  }
}

void Barometer::MergeFrom(const Barometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:airmap.telemetry.Barometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.pressure() != 0) {
    set_pressure(from.pressure());
  }
}

void Barometer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:airmap.telemetry.Barometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Barometer::CopyFrom(const Barometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:airmap.telemetry.Barometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Barometer::IsInitialized() const {
  return true;
}

void Barometer::Swap(Barometer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Barometer::InternalSwap(Barometer* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(pressure_, other->pressure_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Barometer::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
}  // namespace airmap
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::Position* Arena::CreateMaybeMessage< ::airmap::telemetry::Position >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::Attitude* Arena::CreateMaybeMessage< ::airmap::telemetry::Attitude >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::Attitude >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::Speed* Arena::CreateMaybeMessage< ::airmap::telemetry::Speed >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::Speed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::airmap::telemetry::Barometer* Arena::CreateMaybeMessage< ::airmap::telemetry::Barometer >(Arena* arena) {
  return Arena::CreateInternal< ::airmap::telemetry::Barometer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
